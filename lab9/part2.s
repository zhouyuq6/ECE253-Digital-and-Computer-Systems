//PSUEDOCODE
//INITIALIZE ALL THE THINGS NECESSARY
//LOAD THE 10000... INTO THE KEYS
//SHIFT THIS TO THE RIGHT OR LEFT ACCORDINGLY
//ALWAYS CHECK IF KEYS ARE PRESSED
//IF KEYS ARE PRESSED THEN WAIT UNTIL KEYS RELEASED THEN PAUSE
//IF NOT CONTINUE WITH LOOP


		.text
		.global _start
_start:
		LDR 	SP, = 0x20000		// CHANGE STACK POINTER TO 20,000
		LDR 	R5, = 0XFF200000	// R5 STORES LEDR PORT
		LDR 	R6, = 0XFF200050	// R6 KEYS PORT
		LDR 	R0, = 0xFFFEC600	// R0 POINTS TO TIMER
		
		LDR 	R7, = 0b1000000000	// R7 IS LOADED TO LED9
		LDR 	R10, = 0			// R10 COUNTS THE POSITION OF THE LOOP: INITIALIZE TO 0
		LDR 	R11, = 0			// FLAG VARIABLE CHECKS IF WE ARE MOVING  0 RIGHT OR 1 LEFT
		
LOOP:	
		STR 	R7, [R5]			// LIGHT UP LEDR WITH VALUE FROM R7
		CMP 	R11, #0				// COMPARE FLAG VARIABLE R11 TO 0
		LSREQ 	R7, R7, #1			// IF FLAG R11 = 0, MOVE TO THE RIGHT
		LSLNE 	R7, R7, #1			// IF FLAG R11 = 1, MOVE TO THE RIGHT
		ADD 	R10, #1				// ADD ONE TO THE POSITION COUNTER R10
		CMP 	R10, #9				// CHECK IF WE HAVE REACHED ONE OF THE ENDS OF THE LEDR
		BEQ 	CHANGEDIR			//IF WE HAVE ONLY REACHED 9 THEN WE CHANGE DIR IF NOT WE DONT DO ANYTHING
		BNE 	CONT				//IF IT IS NOT 9 SKIP DIRECTION CHANGE AND CONTINUE
		
CHANGEDIR:
		CMPEQ 	R11, #0			//FIND THE CURRENT VALUE OF R11
		LDREQ 	R11, = 1			//LOAD THE FLAG VARIABLE WITH 1 akaRIGHT MOVE IF NOT REACHED RIGHT END YET
		LDRNE 	R11, = 0			//LOAD THE FLAG VARIABLE WITH 0 akaLEFT MOVE IF NOT REACHED LEFT END YET
		LDR 	R10, = 0			// RESET THE COUNTER SINCE IT HAS REACHED 9
		
CONT:	BL 		BEGINDELAY			//DELAY
		LDR 	R9, = 0				// SET FLAG VARIABL R9 TO BE 0 THIS FLAG REMEMBER IF KEY JUST RELESED
		LDR 	R8, [R6]			//READ KEYS
		CMP 	R8, #0				// COMPARE KEYS TO 0. CHECK IF NO KEYS ARE PRESSED
		BLNE 	WAIT				// IF KEYS PRESSED, BRANCH TO WAIT. WAIT TILL KEY RELEASED
		CMP 	R9, #0				// CHECK IF KEY WAS PRESSED IF KEY WAS NOT PRESSED THESE LINES NOT EXECTUED
		BLNE 	PAUSEBEGIN			//IF R9 NOT 0 THAT MEANS KEY WAS PRESSED TO GO TO PAUSE
		
		
		B 		LOOP					//BRANCH BACK TO LOOP
		
		
END:	B		END

WAIT:
		LDR 	R8, [R6]			//LOAD REGISTER 8 WITH KEYS
		CMP 	R8, #0				//CHECK TO SEE IF KEYS ARE NOT PRESSED AKA 0
		BNE 	WAIT				//IF THE KEYS ARE PRESSED STILL THEN KEEP WAITING
		LDR 	R9,= 1				//IF THE KEYS NOT PRESSED SET FLAG REGISTER R9 =1 
		MOV 	PC, LR				//GO BACK TO WHERE WE CAME FROM EITHER MAIN OR PAUSE
		

PAUSEBEGIN:
		PUSH 	{LR}				// STOR LINK TO MAIN
PAUSE:	LDR 	R8, [R6]			// READ KEYS, SHOULD BE COMING AS 0S BECAUSE RELEASED
		CMP 	R8, #0				// COMPARE KEYS TO 0, IF KEYS ARE PRESSED R8 WOULD NOT BE 0
		BEQ 	PAUSE				// IF THE KEY ARE ZERO NO KEYS WERE PRESSED BRANCH BACK TO PAUSE
		BLNE 	WAIT 				// IF THE KEYS ARE NOT ZERO WAIT UNTIL KEYS ARE 0 AND THE BRANCH BACK TO MAIN
									//PREV LINES LOOPED TILL KEY WAS PRESSED THEN WAITED TILL KEY RELEASED 
		POP 	{LR}				//RESTORE MAIN LINK REGISTER
		MOV 	PC, LR
		
BEGINDELAY:	
		LDR 	R1, = 20000000		// STORE 20,000,000 IN R1
		STR 	R1, [R0]			// WRITE VALUE OF R1 INTO LOAD REGISTER OF TIMER
		MOV 	R1, #0b011			// A = 1, E = 1
		STR 	R1, [R0,#8]			// WRITE TO CONTROL REGISTER. R0#8 IS CONTROL REGISTER OF TIMER
DELAY:	LDR 	R1, [R0,#0xC]		// LOAD INTERRUPT STATUS INTO R1
		CMP 	R1, #0				// CMP TO SEE IF INTERRUPT STATUS 0
		BEQ		DELAY				// IF INTERUPT STATUS 0 REPEAT
		STR 	R1, [R0,#0xC]
		MOV 	PC, LR
		
		.end