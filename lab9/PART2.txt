		.text
		.global	_start

_start:	LDR		R1, =0xFF200000		//LEDR ports
		LDR		R2, =0xFF200050		//KEYS
		MOV		R3, #1				//initial pattern
		LDR		R7, =0xFFFEC600		//R8 points to timer
		LDR		R0, =20000000		//Delay
		STR		R0, [R7]			//load value=R0 to R7
		MOV		R0, #0b011			//A=1, E=1, I=0
		STR		R0, [R7, #8]		//write to CNTR Reg.
		MOV		R9, #0				//flag that keeps track of whether the light is at the left or right
		MOV		R8, #0				//flag to keep track of the state of the display (ie. paused or moving)
								
DISPLAY:STR		R3, [R1]			//light LEDR
		LDR		R4, [R2]			//read KEYS
		CMP		R4, #0b1000			//check if KEY is pressed
		BEQ		PAUSE
		CMP		R8, #1				//check if display is in paused state
		BEQ		DISPLAY				//if yes, stay in the display subroutine
		B   	SHIFT				//if no, branch to shift subroutine
	
PAUSE:	LDR		R4, [R3]			//read KEYS
		CMP		R4, #0b0000			//check if KEY is not pressed
		BNE		PAUSE
		EOR		R8, #1				
		B 		DISPLAY	
		
SHIFT:	CMP		R3, #0b1000000000
		MOVEQ	R9, #1				//if the light is on the left/has moved to the left, R9 = 1
		CMP		R3, #0b0000000001
		MOVEQ	R9, #0				//if the light is on the right/has moved to the right, R9 = 0
		CMP		R9, #0
		ROLEQ	R3, #1
		RORNE	R3, #1

DELAY:	LDR		R0, [R7, #0xC]		
		CMP		R0, #0
		BEQ		DELAY
		STR		R0, [R7, #0xC]
		B       DISPLAY
		.end